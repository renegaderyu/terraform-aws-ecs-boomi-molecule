[MULTILINE_PARSER]
    # Adapted from https://community.boomi.com/s/article/Consume-Process-Logs-with-Fluentd
    # This parser is used to capture the entire process log as a single event
    # The process log is a single XML file that contains multiple log events
    # Examples of what is captured in the multiline parser:
    #
    # <LogRef executionId="execution-9033334d-be6e-4da8-9999-3bdf3f16bf5f-2025.02.19" logFileName="process_log.xml" time="2025-02-19T23:35:28Z" />
    # <LogEvent level="WARNING" time="2025-02-19T23:15:22Z" shapename="cleanup..." shapetype="cleanup..." shapelabel="" shapeextendedinfo="">
    #   <message>message</message>
    # </LogEvent>
    #
    # To properly parse the process log, we'd have to:
    #  - parse each LogEvent element as a single event
    #  - pick out the executionId from the LogRef element and attach it to each LogEvent element
    #  - parse the message element from each LogEvent element
    #  - parse the level, time, shapename, shapetype, shapelabel, and shapeextendedinfo attributes from each LogEvent element
    #  - ignore all other elements
    name          multiline_boomi-process-logs
    type          regex
    flush_timeout 2000
    #
    # Regex rules for multiline parsing
    # ---------------------------------
    #
    # configuration hints:
    #
    #  - first state always has the name: start_state
    #  - every field in the rule must be inside double quotes
    #
    # rules |   state name  | regex pattern                        | next state
    # ------|---------------|--------------------------------------|-----------
    rule     "start_state"   "/^<\?xml version/"                    "cont"
    rule     "cont"          "/^.*/"                                "cont"

[MULTILINE_PARSER]
    name          multiline_boomi-runtime-logs
    type          regex
    flush_timeout 2000
    # Regex rules for multiline parsing
    # rules |   state name  | regex pattern                                                                                                            | next state
    # ------|---------------|--------------------------------------------------------------------------------------------------------------------------|-----------
    # All runtime log events begin w/ a date matching this pattern: Aug 7, 2025 9:38:30 AM EDT INFO    [
    # OR an IP address like: 127.0.0.1
    rule     "start_state"   "/^(\w{3}\s+\d{1,2}\,\s+\d{4}\s+\d{1,2}:\d{2}:\d{2}\s+\w{2}\s+\w{3}\s+[A-Z]+\s+\[|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+)/"  "cont"
    rule     "cont"          "/^.*/"                                                                                                                     "cont"

[PARSER]
    Name   parse-runtime-logs
    Format regex
    # Example
    # Feb 19, 2025 11:36:01 AM EST INFO message
    Regex  /^(?<event_time>\w{3}\s\d{1,2}\,\s\d{4}\s\d{1,2}:\d{2}:\d{2}\s\w{2}\s\w{3})\s(?<level>[A-Z]+)\s+(?<message>.*)$/
